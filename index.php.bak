<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">

<html>
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org">
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">

    <title>PointedEars' JavaScriptDoc&trade;</title>
    <!-- Dublic Core Metadata, see http://dublincore.org/ for details -->
    <meta
      name="DC.title"
      content="PointedEars' JavaScriptDoc&trade;">
    <meta
      name="DCTERMS.alternative"
      content="JSdoc&trade;">
    <meta
      name="DC.subject"
      content="Documentation">
    <meta
      name="DC.creator"
      content="jsdoc@PointedEars.de (Thomas Lahn)">
    <meta
      name="DC.description"
      content="An application that generates documentation markup from /** JSdoc&trade; comments */ within JavaScript&trade; source code. Includes syntax description with examples and the documentation generator.">
    <meta
      name="DC.publisher"
      content="jsdoc@PointedEars.de (Thomas Lahn)">
    <meta
      name="DCTERMS.issued"
      content="2003-11-19T05:57:38+01:00">
    <meta
      name="DCTERMS.created"
      content="2003-10-16T21:38:11+0200">
    <meta
      name="DCTERMS.modified"
      content="<?php
        $modi = date('Y-m-d\TH:i:sO', @filemtime(__FILE__));
        echo $modi; 
        ?>">
    <meta
      name="DCTERMS.available"
      content="2003-11-19T05:57:38+01:00">
    <meta
      name="DC.type"
      content="InteractiveResource">
    <meta
      name="DC.format"
      content="text/html">
    <meta
      name="DC.identifier"
      content="http://pointedears.de.vu/scripts/JSDoc/">
    <meta
      name="DC.source"
      content="JavaDoc&trade;, PHPdoc">
    <meta
      name="DC.language"
      content="en">
    <meta
      name="DC.relation"
      content="http://pointedears.de.vu/scripts/">
    <meta
      name="DC.coverage"
      content="JavaScript">
    <meta
      name="DC.rights"
      content="Copyright &copy; 2003. All rights reserved.">
    <meta
      name="DCTERMS.audience"
      content="JavaScript programmers">
    <meta
      name="DCTERMS.tableOfContents"
      content="Syntax Description, Example, Documentation Generator">

    <link rel="stylesheet" href="../style.css" type="text/css">
    <style type="text/css">
      <!--
      body {
        margin-left:15px;
        margin-right:15px;
        background-color:white;
        color:black;
      }
      
      .jsdoc {
        background-color:#fff;
        color:#36c;
        text-decoration:inherit;
      }

      .jsdoc_key {
        background-color:#fff;
        color:#69c;
        font-weight:bold;
      }
        
      .jsdoc_entity, .jsdoc_tag {
        background-color:#fff;
        color:#669;
      }
        
      .jsdoc_link {
        background-color:#fff;
        color:#33c;
      }
      
      dt {
        margin-top:1em;
      }

      dd, p {
        text-align:justify;
      }
      -->
    </style>
  </head>

  <body>
    <h1><a name="top" id="top">PointedEars' <span
      class="jsdoc">JavaScriptDoc</span> (<span
      class="jsdoc">JSdoc&trade;</span>)</a></h1>
          
    <ul>
      <li><a href="#intro">Introduction</a>
        <ul>
          <li><a href="#whatsthat">What <span class="jsdoc">JSdoc&trade;</span>
            is</a></li>
         <li><img
           src="../../media/ani-new.gif"
           width="width_in_pixels"
           height="height_in_pixels"
           border="0"
           alt="NEW!">
           <a href="#whatsnot">What <span class="jsdoc">JSdoc&trade;</span>
             is not</a></li>
        </ul></li>
      <!--<li><a href="#Documentation Generator</li>-->
      <li><a href="#syntax">Syntax</a></li>
      <li><a href="#example">Example</a>
        <ul>
          <li><a href="#example_input">Input</a></li>
          <li><a href="#example_output">Output</a></li>
        </ul></li>
      <li><a href="#grammar">Grammar</a></li>
      <li><a href="#help">How you can help</a></li>
      <li><a href="#copyright">Copyright &amp; disclaimer</a></li>
      <li><a href="#online"><span class="jsdoc">JSdoc&trade;</span> online</a></li>
    </ul>   
    
    <hr size="4"> 

    <h2><a name="intro" id="intro">Introduction</a></h2>

    <h3><a name="whatsthat" id="whatsthat">What
      <span class="jsdoc">JSdoc&trade;</span> is</a></h3>

    <p>This application generates documentation markup from <code
      class="jsdoc">/** JSdoc&trade; comments */</code> within
      JavaScript&trade; source code.</p>
    
    <h3><a name="whatsnot" id="whatsnot">What
      <span class="jsdoc">JSdoc&trade;</span> is not</a></h3>
      
      <p><strong><em>Do not confuse <span class="jsdoc">JSdoc&trade;</span>
      with <a href="http://jsdoc.sf.net/">JSDoc</a>!  PointedEars' (my)
      <span class="jsdoc">JSdoc&trade;</span> is a completely independent
      project that has been started 2003-10-16T21:38:11+0200 and is online
      since 2003-11-19T05:57:38+01:00.</em>  (Believe it or not: <em>I did
      not know that there is JSDoc before  2004-01-23T02:03:11+01:00</em>
      as it was announced in
      <a href="news:de.comp.lang.javascript">de.comp.lang.javascript</a>,
      message-id
      &lt;<a href=
"http://groups.google.com/groups?as_umsgid=bukg0p$ivfbl$1@ID-27552.news.uni-berlin.de"
      >bukg0p$ivfbl$1@ID-27552.news.uni-berlin.de</a>&gt;.)</strong></p>
      
      <p>Please understand that in the course of software development it is
      likely one gets the idea of porting known concepts (here: Javadoc&trade;,
      PHPdoc) to other programming languages.  <strong>No disturbance is meant
      with this project for the developers of JSDoc.</strong>  Instead, I wish
      them success as I do hope they do wish me the same (maybe we can help
      each other or even work on this together?  Feel free to drop me an e-mail
      anytime, see &quot;<a href="#help">How You Can Help</a>&quot;.)</p>
      
      <p>Although not intended in the first place, I do hope the &trade;
      (trademark), the different spelling and coloring now helps to distinguish
      the two(?) approaches of documentation for source code in languages based
      upon ECMAScript.</p>

    <p><a href="#top">Go to top</a></p>
    
    <hr size="3"> 

<!--
    <h2><a name="generator" id="generator">Documentation Generator</a></h2>

    <form>
      <u>S</u>ource code:<br>
       
      <textarea cols="80" rows="20" style="width:100%" accesskey="s"
       >function /** @type Earth */ universe_deepThought(
  /** @argument optional Array of number */ foobar)
/**
 * @param bar
 *   Optional input vector for Deep Thought.
 * @returns
 *   The computer that is able to provide The Question
 *   about Life, the Universe and Everything: Earth.
 * @throws EndOfTheUniverseException
 * @see
 *   &quot;Adams, Douglas: The Restaurant at the End of the Universe&quot;
 */
{
  alert(42);
  return (/** @property Earth */ this.earth = new Earth());
}
   
function Universe(
  /** @optional Array of number */ naturalConstants)
/**
 * @param naturalConstants
 *   The natural constants for the new universe.
 * @throws InvalidArgumentException
 * @see    Earth()
 */
{
  if (naturalConstants in god.garbage)
    throw new InvalidArgumentException();
}
/** @method */ Universe.prototype.deepThought = universe_deepThought;
    
var ourUniverse = new Universe();</textarea>
    <script src="../string.js" type="text/javascript"></script>
    <script src="../test/debug.js" type="text/javascript"></script>
    <script type="text/javascript">
      function jsDoc(o)
      {
        if (o.elements && o.elements[0] && o.elements[0].value)
        {
          var s = o.elements[0].value; // source
          // find the first function
          var sFunctionHead =
              "(\\/\\*\\*(.|\\s)*?\\*\\/)*"  // optional JSDoc before the head
            + "\\s*"                         // optional whitespace
            + "function"                     // function keyword
            + "((\\s*\\/\\*(.|\\s)*?\\*\\/\\s*)|\\s)+" // comment or whitespace
            + "([A-Za-z_$UNICODE][_$\\wUNICODE]*)*"    // function identifier
            + "\\s*"                         // optional whitespace
            + "\\(([^)]*)\\)"                // declaration of arguments
            + "\\s*"                         // optional whitespace
            + "(\\/\\*(.|\\s)*?\\*\\/|\\s)*" // optional comment or whitespace
            + "\\s*"                         // optional whitespace
            + "\\{";                         // begin of body
            /*
             * paranthesized substring matches:
             * \1  optional JSDoc comment before the head
             * \2  optional JSDoc before the head
             * \3  comment or whitespace adjacent to the function keyword
             * \4  
             * \5
             * \6
             * \7
             */
          // Unicode support (from JavaScript 1.5 on)
          if ("\uFFFF".length == 1)
            sFunctionHead =
              sFunctionHead.replace(/UNICODE/g, "\\u0080-\\uFFFF");
          else
            sFunctionHead = sFunctionHead.replace(/UNICODE/g, "");

          var rxFunction = new RegExp(sFunctionHead); 

          var start = 0;
          var index;
          var accu = "";
          
          var x = rxFunction.exec(s);
          while (x != null)
          {
            accu += x[0] + "\n";
            x = rxFunction.exec(s);
          }
          alert(accu);
          // alert(accu.match(sFunctionHead).join("\n___\n"));
           
          //alert(sDoc);
          return false;
           
          var sTitle = /<title>([^<]+)<\/title>/g.exec(s);
          if (sTitle)
            sTitle = sTitle[1];

          // alert(s.match(/\/\*.*\*\//g));

          var w = window.open();
          if (w
              && w.document
              && w.document.open
              && w.document.write
              && w.document.close)
          {
            w.document.open("text/html");
            w.document.write(
               '<DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n'
             + '"http://www.w3.org/TR/html4/loose.dtd">\n'
             + '<html>\n'
             + '  <head>\n'
             + '    <meta http-equiv="Content-Type"'
             + ' content="text/html; charset=ISO-8859-1">\n'
             + '    <title>' + sTitle + '<\/title>\n'
             + '  <\/head>\n'
             + '  <body>\n'
             + sDoc
             + '  <\/body>\n'
             + '<\/html>');
            w.document.close();
          }
          return false;
        }
      }
    </script>
      <input
        type="button"
        value="Generate Documentation"
        accesskey="g"
        onclick="jsDoc(this.form)">
    </form>

    <p><a href="#top">Go to top</a></p>
    
    <hr size="3">
-->
    <h2><a name="syntax" id="syntax">Syntax</a></h2>

    <dl>
      <dt><code class="jsdoc">/** <span class=
        "jsdoc_tag">&lt;title&gt;</span><var>title</var><span class=
        "jsdoc_tag">&lt;/title&gt;</span> */</code></dt>
        <dd>Specifies the <var class="jsdoc">title</var> of the
        script&nbsp;file which will be used as document title
        and first-level heading.

        <p>Note: Subsequent occurrences of the <code class=
        "jsdoc_tag">title</code> element will either be ignored
        or overwrite the previous definitions, depending on
        your settings (the latter is recommended, though, to avoid
        garbage content.)  You do not need to title functions,
        <span class="jsdoc">JSdoc&trade;</span> will title them
        automagically, using their identifier.</p></dd>

      <dt><code><span class="jsdoc">/** <span class=
        "jsdoc_key">@version</span> <var class="jsdoc">version</var>
        */<br>
        /** <span class=
        "jsdoc_key">@version</span> */</span>
        ...&quot;<var>version</var>&quot;...<br>
        <span class="jsdoc">/** <span class=
        "jsdoc_key">@version</span> */</span>
        ...'<var>version</var>'...</code></dt>
        <dd>Specifies the <var class="jsdoc">version</var> of the script
          or the function.
          
          <p>This keyword may occur more than once within the same context.
            In that case, subsequent declarations overwrite previous
            ones.</p></dd>

      <dt><code class="jsdoc">/** <span class=
        "jsdoc_key">@author</span> <var>authorship</var> */</code></dt>
        <dd>Specifies the <var class="jsdoc">authorship</var> of the script
          or the function.  This may include, but is not limited to, copyright,
          name and e-mail address.  It is good practice to use this template
          for <var class="jsdoc">authorship</var>:
          
          <p><code class="jsdoc">(C) <var>years</var>&nbsp;
          <var>full&nbsp;name</var> &lt;<var>email@address</var>&gt;</code></p>
          
          <p>(<span class="jsdoc">JSdoc&trade;</span> can automagically convert
          <code class="jsdoc">(C)</code> to &copy; [copyright],
          <code class="jsdoc">(TM)</code> or <code class="jsdoc">[TM]</code>
          to &trade; [trademark] and <code class="jsdoc">(R)</code> to &reg;
          [registered trademark].  Conversion can be done case-insensitive.)</p>
          
          <p>This keyword may occur more than once within the same context.
            In that case, authorship declarations are accumulated in a
            list.</p></dd>
            
      <dt><var class="jsdoc"><a name="LinkResource" id="LinkResource"
        href="#LinkResource"
        >LinkResource</a></var> ::=</dt>
        <dd><code>[[<var class="jsdoc"><a href="#base_id">base_id</a></var>
        <span class="jsdoc_key">#</span>]
        <var class="jsdoc"><a href="#fragment_id">fragment_id</a></var>]
        <var class="jsdoc"><a href="#argument_id">argument_id</a></var><br>
        <var class="jsdoc"><a href="#base_id">base_id</a></var>
        [<span class="jsdoc_key">#</span>
        <var class="jsdoc"><a href="#fragment_id">fragment_id</a></var>
        [<var class="jsdoc"><a href="#argument_id">argument_id</a></var>]]</code>
            
          <p>Use <code><var class="jsdoc"><a href="#argument_id"
            >argument_id</a></var></code> to specify
            functions or function arguments.</p></dd>

      <dt><var class="jsdoc"><a name="base_id" id="base_id"
        href="#base_id"
        >base_id</a></var> ::=</dt>
        <dd><code><var class="jsdoc">filename</var><br>
        <var class="jsdoc">JSdocCatalogBaseID</var></code></dd>

      <dt><var class="jsdoc"><a name="fragment_id" id="fragment_id"
        href="#fragment_id"
        >fragment_id</a></var> ::=</dt>
        <dd><code><var class="jsdoc">HTML401FragmentID</var>
        [lookahead not <span class="jsdoc_key">()</span>]</code></dd>

      <dt><var class="jsdoc"><a name="argument_id" id="argument_id"
        href="#argument_id"
        >argument_id</a></var> ::=</dt>
        <dd><code><span class="jsdoc_key">(</span>[<var
          class="jsdoc"><a href="#word">word</a></var>]<span
            class="jsdoc_key">)</span></code></dd>

      <dt><var class="jsdoc"><a name="ResourceExpression"
        id="ResourceExpression" href="#ResourceExpression"
        >ResourceExpression</a></var> ::=</dt>
        <dd><code><var class="jsdoc"><a
          href="#LinkResource">LinkResource</a></var>
            [<var class="jsdoc">version</var>]
            [<span class="jsdoc_key">,</span>
            <a href="#ResourceExpression">ResourceExpression</a>]<br>
          <span class="jsdoc">&quot;<var>resource</var>&quot;</span>
          [<span class="jsdoc_key">,</span>
          <a href="#ResourceExpression">ResourceExpression</a>]<br>
          <span class="jsdoc">'<var>resource</var>'</span>
          [<span class="jsdoc_key">,</span>
            <a href="#ResourceExpression">ResourceExpression</a>]</code>
             
          <p>Specifies a <var class="jsdoc">resource</var>. Use quotes to
            prevent <span class="jsdoc">JSdoc&trade;</span> from looking up
            substrings for hyperlink creation.</p></dd>
        
      <dt><code><span class="jsdoc">/** <span class="jsdoc_key"
        >@</span></span>[<span class="jsdoc_key">link</span>]<span
        class="jsdoc_key">{</span><var class="jsdoc"><a href="#LinkResource"
        >LinkResource</a></var>[<span class="jsdoc_key">,</span>
        <var class="jsdoc">description</var>]<span class="jsdoc_key">}</span>
        <span class="jsdoc">*/</span></code></dt>
        <dd>Specifies a visible hyperlink to a resource.  Probably the most
            important keyword.  Use <var class="jsdoc">description</var> to
            specify the text to be displayed instead of the formatted
            <code><var class="jsdoc"><a href="#LinkResource"
            >LinkResource</a></var></code>.</dd>

      <dt><code><span class="jsdoc">/** <span class=
        "jsdoc_key">@deprecated</span></span> [<var><a
          href="#ResourceExpression">ResourceExpression</a></var>]
        <span class="jsdoc">*/</span></code></dt>
        <dd>Specifies a <var class="jsdoc">resource</var> that
          is no longer required by the script or function (due to
          refactoring).<br>
          Marks the current context as deprecated if
          <var class="jsdoc">resource</var> is omitted.</dd>

      <dt><code><span class="jsdoc">/** <span class=
        "jsdoc_key">@filename</span> <var class=
        "jsdoc">filename</var> */</span></code></dt>
        <dd>Specifies the original <var class="jsdoc">filename</var>
          of the script file.</dd>

      <dt><code class="jsdoc">/** <span class=
        "jsdoc_key">@partof</span> <var><a
          href="#ResourceExpression">ResourceExpression</a></var> */</code></dt>
        <dd>Specifies a <var class="jsdoc">resource</var> that the
        script&nbsp;file is part of.</dd>

      <dt><code class="jsdoc">/** <span class=
        "jsdoc_key">@dependson</span> <var><a
          href="#ResourceExpression">ResourceExpression</a></var> */<br>
          /** <span class=
        "jsdoc_key">@requires</span> <var><a
          href="#ResourceExpression">ResourceExpression</a></var> */</code></dt>
        <dd>Specifies a <var class="jsdoc">resource</var> that is required by
        the script or function.</dd>

      <dt><code class="jsdoc">/** <span class=
        "jsdoc_key">@reqfor</span> <var><a
          href="#ResourceExpression">ResourceExpression</a></var> */<br>
        /** <span class=
        "jsdoc_key">@requiredfor</span> <var><a
          href="#ResourceExpression">ResourceExpression</a></var> */</code></dt>
        <dd>Specifies a <var class="jsdoc">resource</var> that the script file
          or function is required for.</dd>

      <dt><code class="jsdoc">/** <span class=
        "jsdoc_key">@source</span> <var><a
          href="#ResourceExpression">ResourceExpression</a></var> */</code></dt>
        <dd>Specifies a <var class="jsdoc">resource</var> the
          script file or the function is based upon.</dd>

      <dt><code class="jsdoc">/** <span class=
        "jsdoc_key">@section</span> <var>title</var> */</code></dt>
        <dd>Specifies the beginning of a new section titled
          <var class="jsdoc">title</var>, also to be used as
          second-level heading.</dd>

      <dt><code class="jsdoc">/** <span class=
        "jsdoc_key">@subsection</span> <var>title</var> */</code></dt>
        <dd>Specifies the beginning of a new subsection titled
          <var class="jsdoc">title</var>, also to be used as
          third-level heading.</dd>

      <dt><var class="jsdoc"><a name="TypeExpression" id="TypeExpression"
        href="#TypeExpression">TypeExpression</a></var> ::=</dt>
        <dd><code><span class="jsdoc"><var>type</var></span>
          [<span class="jsdoc"><span
            class="jsdoc_key">of</span>&nbsp;<var>subtype</var></span>]
          [<span class="jsdoc_key">|</span>
            <a href="#TypeExpression">TypeExpression</a>]</code>
          
          <p>Specifies the <var class="jsdoc">type</var>(s) of data that is
            stored/referenced to, and if provided, the
            <var class="jsdoc">subtype</var>(s) of it.
            If <var class="jsdoc">type</var> is an object type (i.e. <code
            class="ident">Object</code> or <code class="ident">Array</code>)
            and if each each element/property of the object is intended to
            be of the same <var class="jsdoc">subtype</var>, you should
            also use the <code class="jsdoc_key">of</code> keyword to
            specify that <var class="jsdoc">subtype</var>.</p></dd>
          
      <dt><code>[<span class="rswd">var</span>] <span class="jsdoc">/** <span
        class="jsdoc_key">@type</span> <var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var> */</span>
        <var>identifier</var> [<span class="punct">=</span>
        <var>value</var>][<span class="punct">;</span>]</code></dt>
        <dd>Specifies the <var class="jsdoc">type</var> of data/object the
        <code><var>identifier</var></code> variable stores/references to. Leave
        the keyword out if the variable stores/references values/objects of
        different types.</dd>
        
      <dt><code><span class="rswd">function</span> <span class="jsdoc">/**
        <span class="jsdoc_key">@type</span>&nbsp;<var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var>
        */</span> <var>identifier</var><span class="punct">(</span><var>...</var><span
        class="punct">)</span></code></dt>
        <dd>Specifies the type of the value the
        <code><var>identifier</var><span class=
        "punct">(</span><var>...</var><span class="punct">)</span></code>
        function returns. Leave the keyword out if the function returns values
        of different types.</dd>
        
      <dt><code><var>identifier</var><span class="punct">(</span><span class=
        "jsdoc">/** <span class="jsdoc_key">@arguments</span></span> [<var
        class="jsdoc"><a href="#TypeExpression">TypeExpression</a></var>]
        <span class="jsdoc">*/</span><span class="punct">)</span></code></dt>
        <dd>Specifies that the <code><var>identifier</var><span class=
        "punct">(</span><var>...</var><span class="punct">)</span></code>
        function accepts an unlimited number of arguments. If those arguments
        must be of the same type (and subtype), you should provide it.</dd>
        
      <dt><code><span class="punct">(</span><span class="jsdoc">/** <span
          class="jsdoc_key">@argument</span> [<span class=
          "jsdoc_key">optional</span>] <var class="jsdoc"><a
          href="#TypeExpression">TypeExpression</a></var> [<span class=
          "jsdoc_key">default</span>&nbsp;<var>value</var>] */</span>
          <var>identifier[<span class="punct">,</span> ...]</var><span class=
          "punct">)</span></code><br> 
          <code><span class="jsdoc">/** <span class=
          "jsdoc_key">@argument</span> [<span class=
          "jsdoc_key">optional</span>] <var class="jsdoc"><a
          href="#TypeExpression">TypeExpression</a></var> [<span class=
          "jsdoc_key">default</span>&nbsp;<var>value</var>]
          <var>identifier</var> [<var>description</var>]
          */</span></code></dt>
        <dd>Specifies the <var>identifier</var> argument of a function. Use the
          <code class="jsdoc_key">optional</code> keyword to specify that the
          argument is optional, i.e. the function works even if it is not
          provided (as there is no arity in JavaScript.) If so, you should also
          use the <code class="jsdoc_key">default</code> keyword to specify the
          default value.<br>
          If <code class="jsdoc"><var>type</var></code> is
          <code class="ident">Array</code> and if the elements of the array are
          of different subtypes, you should leave the
          <code class="jsdoc_key">of</code> keyword out and describe the
          argument further with <var class="jsdoc">description</var> or the
          <code class="jsdoc_key">@param</code> keyword. 

          <p>The <code class="jsdoc_key">@argument</code> keyword comes in two
          flavors which are accepted in different contexts: One when the
          comment is placed within the head of the function, where
          <span class="jsdoc">JSdoc&trade;</span>'s
          <var class="jsdoc">identifier</var> and <var class=
          "jsdoc">description</var> are ignored in favor of
          <var>identifier</var> in the JavaScript source -- then you should
          provide the <code class="jsdoc_key">@param</code> keyword for
          <var>identifier</var>; the other one when the comment is placed
          before the head or within the function body, where <var class=
          "jsdoc">identifier</var> is required. If <var class=
          "jsdoc">description</var> is provided, <code class=
          "jsdoc_key">@param</code> with the same <var class=
          "jsdoc">identifier</var> add to this description.</p></dd>
      
      <dt><code class="jsdoc">/** <span class="jsdoc_key">@optional</span>
        <var>...</var> */</code></dt>
        <dd>Same as <code class="jsdoc_key">@argument optional</code>.</dd>
        
      <dt><code><span class="jsdoc">/** <span class="jsdoc_key">@param</span>
        <var>identifier</var> <var>description</var> */</span></code></dt>
        <dd>Specifies further description of the <var class=
        "jsdoc">identifier</var> argument.</dd>
        
      <dt><code><span class="jsdoc">/** <span class=
        "jsdoc_key">@property</span> <var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var> */</span>
        <var>object</var><span class="punct">.</span><var>identifier</var>
        [<span class="punct">=</span> <var>value</var>][<span class=
        "punct">;</span>]</code><br>
        <code><span class="jsdoc">/** <span class=
        "jsdoc_key">@property</span> <var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var> */</span>
        <var>object</var><span class="punct">[</span>&quot;<var
        >identifier</var>&quot;<span class="punct">]</span>
        [<span class="punct">=</span> <var>value</var>][<span
        class="punct">;</span>]</code><br>
        <code><span class="jsdoc">/** <span class=
        "jsdoc_key">@property</span> <var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var> */</span>
        <var>object</var><span class="punct">[</span>'<var
        >identifier</var>'<span class="punct">]</span>
        [<span class="punct">=</span> <var>value</var>][<span
        class="punct">;</span>]</code></dt>
        <dd>Specifies that <var>identifier</var> is a
        property of <var>object</var>. Although <span
        class="jsdoc">JSdoc&trade;</span> attempts
        to detect what properties an object has, it cannot detect the
        <var class="jsdoc">type</var> of data these properties should
        accept.</dd>
        
      <dt><code><span class="jsdoc">/** <span class=
        "jsdoc_key">@method</span> [<var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var>] */</span>
        <var>object</var><span class="punct">.</span><var>identifier</var>
        [<span class="punct">=</span> <var>value</var>][<span class=
        "punct">;</span>]</code><br>
        <code><span class="jsdoc">/** <span class=
        "jsdoc_key">@method</span> [<var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var>] */</span>
        <var>object</var><span class="punct">[</span>&quot;<var
        >identifier</var>&quot;<span class="punct">]</span>
        [<span class="punct">=</span> <var>value</var>][<span
        class="punct">;</span>]</code><br>
        <code><span class="jsdoc">/** <span class=
        "jsdoc_key">@method</span> [<var class="jsdoc"><a
        href="#TypeExpression">TypeExpression</a></var>] */</span>
        <var>object</var><span class="punct">[</span>'<var
        >identifier</var>'<span class="punct">]</span>
        [<span class="punct">=</span> <var>value</var>][<span
        class="punct">;</span>]</code></dt>
        <dd>Specifies that <var>identifier</var> is a method
        of <var>object</var>, i.e. a property of type
        <code class="rswd">function</code>.
        If the method is defined with the <code class="ident">Function</code>
        constructor or the <code class="rswd">function</code> operator, you
        should specify the <var class="jsdoc">type</var> and, if necessary,
        the <var class="jsdoc">subtype</var> of the value the method
        returns. Otherwise, i.e. if you assign a reference to a
        <code class="ident">Function</code> object using its identifier,
        <span class="jsdoc">JSdoc&trade;</span> attempts to determine
        the type using the data that has been specified for that function with
        the <code class="jsdoc_key">@type</code> keyword.</dd>
        
      <dt><code><span class="jsdoc">/** <span class="jsdoc_key"
        >@return</span></span>[<span class="jsdoc_key">s</span>]<span
        class="jsdoc"> <var>description</var> */</span></code></dt>
        <dd>Specifies a description of the value(s) a function can return.
          <code class="jsdoc_key">@return</code> and
          <code class="jsdoc_key">@returns</code> are equally supported,
          the former for compatibility reasons.</dd>
          
      <dt><code class="jsdoc">/** <span class="jsdoc_key">@throws</span>
        <var>identifier</var> */</code></dt>
        <dd>Specifies the exception(s) a function throws.</dd>
        
      <dt><code><span class="jsdoc">/** <span class=
        "jsdoc_key">@see</span></span> <span class="jsdoc">*/</span></code></dt>
        <dd>Specifies crossreferences to other documentation.</dd>
       
    </dl>
    
    <p><span class="jsdoc">JSdoc&trade;</span> blocks are combined
    where each block is interpreted as a paragraph unless they are not
    separated by JavaScript code containing a definition or declaration or
    started with a <code class="jsdoc_key">@keyword</code>. The parameters
    for a <code class="jsdoc_key">@keyword</code> are considered finished
    when the generator finds another keyword or the current
    <span class="jsdoc">JSdoc&trade;</span> block ends. Empty
    lines are considered the delimiter between paragraphs. Leading asterisks
    are ignored by default (see below.)</p>

    <p><a href="#top">Go to top</a></p>
    
    <hr size="3">

    <h2><a name="example" id="example">Example</a></h2>

    <h3><a name="example_input" id="example_input">Input</a></h3>
    <p>
    <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>

    <span class="rswd">function</span> <span class="jsdoc">/** <span class=
    "jsdoc_key">@type</span> Earth */</span> universe_deepThought<span
    class="punct">(</span><br>
    &nbsp;&nbsp;<span class="jsdoc">/** <span class="jsdoc_key">@argument
    optional</span> Array <span class="jsdoc_key">of</span> number */</span>
    foobar<span class="punct">)</span><br>
    <span class="jsdoc">/**<br>
    &nbsp;* <span class="jsdoc_key">@param</span> foobar<br>
    &nbsp;* &nbsp;&nbsp;Optional input vector for Deep Thought.<br>
    &nbsp;* <span class="jsdoc_key">@returns</span><br>
    &nbsp;* &nbsp;&nbsp;The computer that is able to provide The Question<br>
    &nbsp;* &nbsp;&nbsp;about Life, the Universe and Everything -- Earth.<br>
    &nbsp;* <span class="jsdoc_key">@throws</span><br>
    &nbsp;* &nbsp;&nbsp;EndOfTheUniverseException<br>
    &nbsp;* <span class="jsdoc_key">@see</span><br>
    &nbsp;* &nbsp;&nbsp;&quot;Adams, Douglas: The Restaurant at the End of the Universe&quot;<br>
    &nbsp;*/</span><br>
    <span class="punct">{</span><br>
    &nbsp;&nbsp;<span class="ident">alert</span><span
    class="punct">(</span><span class="num">42</span><span
    class="punct">);</span><br>
    &nbsp;&nbsp;<span class="rswd">return</span> <span
    class="punct">(</span><span class="jsdoc">/** <span
    class="jsdoc_key">@property</span> Earth */</span> <span
    class="rswd">this</span><span
    class="punct">.</span>earth <span class="punct">=</span>
    <span class="rswd">new</span> <span
    class="ident">Earth</span><span class="punct">());</span><br>
    }<br>
    <br>
    <span class="rswd">function</span> Universe<span class="punct">(</span><br>
    &nbsp;&nbsp;<span class="jsdoc">/** <span class="jsdoc_key">@optional</span>
    Array <span class="jsdoc_key">of</span> number */</span>
    naturalConstants<span class="punct">)</span><br>
    <span class="jsdoc">/**<br>
    &nbsp;* <span class="jsdoc_key">@param</span> naturalConstants<br>
    &nbsp;* &nbsp;&nbsp;The natural constants for the new universe.<br>
    &nbsp;* <span class="jsdoc_key">@throws</span><br>
    &nbsp;* &nbsp;&nbsp;InvalidArgumentException<br>
    &nbsp;* <span class="jsdoc_key">@see</span><br>
    &nbsp;* &nbsp;&nbsp;Earth()<br>
    &nbsp;*/</span><br>
    <span class="punct">{</span><br>
    &nbsp;&nbsp;<span class="rswd">if</span> <span class=
    "punct">(</span>naturalConstants <span class="rswd">in</span>
    god.garbage<span class="punct">)</span><br>
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="rswd">throw new</span> <span class=
    "ident">InvalidArgumentException</span><span class="punct">();</span><br>
    <span class="punct">}</span><br>
    <span class="jsdoc">/** <span class="jsdoc_key">@method</span>
    */</span> Universe<span class="punct">.</span>prototype<span
    class="punct">.</span>deepThought <span class="punct">=</span> <span
    class="ident">universe_deepThought</span><span class="punct">;</span><br>
    <br>
    <span class="rswd">var</span> ourUniverse = <span class="rswd">new</span>
    <span class="ident">Universe</span><span class=
    "punct">();</span></code></p>

    <h3><a name="example_output" id="example_output">Output</a></h3>

    <p>The following is a <em>possible</em> documentation to be created
      by <span class="jsdoc">JSdoc&trade;</span> from the above
      source code, using only a minimum stylesheet.  You can define your
      own settings and stylesheets to make the content and layout fitting
      to your needs.</p>

    <hr size="2">
    <p><code><span class="ident"><a href="#Earth">Earth</a></span>
      <span class="ident"><a
        name="universe_deepThought"
        id="universe_deepThought">universe_deepThought</a></span>([<var><span
        class="ident"><a
          href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/array.html"
          >Array</a></span>[<a
          href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/number.html"
          >number</a>] foobar</var>])
    </code></p>
    <table>
      <tr valign="top">
        <th align="left">Arguments: </th>
        <td><dl>
            <dt><var>foobar</var></dt>
              <dd>Optional input vector for Deep Thought.</dd>
          </dl></td>
      </tr>
      <tr valign="top">
        <th align="left">Properties: </th>
        <td><dl>
            <dt><code><span class="ident"><a href="#Earth">Earth</a></span>
              earth</code></dt>
          </dl></td>
      </tr>
      <tr valign="top">
        <th align="left">Return value: </th>
        <td>The computer that is able to provide The Question
          about Life, the Universe and Everything -- Earth.</td>
      </tr>
      <tr valign="top">
        <th align="left">Throws: </th>
        <td><code><a href="#EndOfTheUniverseException"
          >EndOfTheUniverseException</a></code></td>
      </tr>
      <tr valign="top">
        <th align="left" nowrap>See also: </th>
        <td>Adams, Douglas: The Restaurant at the End of the Universe</td>
      </tr>
    </table>
    <hr size="1">
    <p><code><span class="ident">Universe</span>([<var><span
        class="ident"><a
          href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/array.html"
          >Array</a></span>[<a
          href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/number.html"
          >number</a>] naturalConstants</var>])
    </code></p>
    <table>
      <tr valign="top">
        <th align="left">Arguments: </th>
        <td><dl>
            <dt><var>naturalConstants</var></dt>
              <dd>The natural constants for the new universe.</dd>
          </dl></td>
      </tr>
      <tr valign="top">
        <th align="left">Properties: </th>
        <td><dl>
            <dt><code><span class="ident"><a href="#Earth">Earth</a></span>
              earth</code></dt>
          </dl></td>
      </tr>
      <tr valign="top">
        <th align="left">Prototype methods: </th>
        <td><dl>
            <dt><code><span class="ident"><a href="#Earth">Earth</a></span>
              <a href="#universe_deepThought">deepThought</a>()</code></dt>
          </dl></td>
      </tr>
      <tr valign="top">
        <th align="left">Throws: </th>
        <td><code><a href="#InvalidArgumentException"
          >InvalidArgumentException</a></code></td>
      </tr>
      <tr valign="top">
        <th align="left" nowrap>See also: </th>
        <td><code><a href="#Earth">Earth</a>()</code></td>
      </tr>
    </table>

    <p><a href="#top">Go to top</a></p>

    <!-- Documentation Generator -->
    <hr size="3">
    
    <h2><a name="grammar" id="grammar">Grammar (incomplete)</a></h2>

    Shorthand notation:
    <ul>
      <li><b>*</b>: 0 or more, greedy</li>
      <li><b>*?</b>: 0 or more, non-greedy</li>
      <li><b>+</b>: 1 or more, greedy</li>
      <li><b>+?</b>: 1 or more, non-greedy</li>
      <li><b>?</b>: 0 or 1, greedy</li>
      <li><b>??</b>: 0 or 1, non-greedy</li>
      <li><b>|</b>: separates alternatives</li>
      <li><b>[ ]</b>: grouping</li> 
    </ul>
    <script src="../grammar.js" type="text/javascript">
    <script type="text/javascript">
// example grammar

var whitespace = new Literal('whitespace')
var optionalWhitespace = new Modifier(whitespace, '*');
var requiredWhitespace = new Modifier(whitespace, '+');

var type = new Production(
  'type',
  new Alternative(['Array', 'number', 'Object', 'string'])
)

var TypeExpression = new Production(
  'TypeExpression',
  new Group([
    type,
    new Modifier(new Group(['of', subtype]), '?'),
    new Modifier(new Group(['|', TypeExpression]), '?')
  ]);
);

var number = new Production(
  'number',
  /[0-9]/
);

var subversion = new Production(
  'subversion',
  new Group([
    '.',
    new Modifier(number, '+'),
    new Modifier(subversion, '*')
  ])
);

var version = new Production(
  'version',
  new Group([
    new Modifier(number, '+'),
    new Modifier(subversion, '*')
  ])
);

var base_id = new Production(
  'base_id',
  null
);

var fragment_id = new Production(
  'fragment_id',
  null
);

var LinkResource = new Production(
  'LinkResource',
  new Group([
    new Modifier(base_id, '?')
    '#',
    fragment_id,
    new Modifier('()', '*')
  ])
);

var ResourceExpression = new Production(
  'ResourceExpression',
  new Alternative([
    new Group([
      LinkResource,
      new Modifier(new Group([requiredWhitespace, version]), '*'),
      new Modifier(
        new Group([
          optionalWhitespace,
          ',',
          optionalWhitespace,
          ResourceExpression
        ]),
        '*')
    ]),
    new Group([
      '"',
      resource,
      '"',
      new Modifier(
        new Group([
          optionalWhitespace,
          ',',
          optionalWhitespace,
          ResourceExpression
        ]),
        '*'
      )
    ]),
    new Group([
      "'",
      resource,
      "'",
      new Modifier(
        new Group([
          optionalWhitespace,
          ',',
          optionalWhitespace,
          ResourceExpression
       ]),
       '*'
      )
    ])
  ])
);

var keyword = new Production(
  'keyword',
  new Alternative([
    new Group([
      '@',
      new Alternative([
        new Group([
          new Alternative(['author', 'section', 'subsection']),
          requiredWhitespace,
          text
        ]),
        new Group([
          'filename',
          whitespace+,
          filename
        ]),
        new Group([
          'deprecated',
          new Modifier(new Group([requiredWhitespace, ResourceExpression]), '*')
        ]),
        new Group([
          new Alternative([
            'partof', 'dependson', 'reqfor', 'requiredfor', 'source'
          ]),
          new Group([requiredWhitespace, ResourceExpression])
        ])
      ])
    ]),
    new Group([
      new Alternative([
        'optional',
        new Group(['of', requiredWhitespace, subtype]),
        new Group(['default', requiredWhitespace, value])
      ])
    ])
  ])
);
</script>
    <pre>   
JSdoc
  : JSdoc_comment [whitespace* JSdoc_comment]*       
  | JSdoc_comment [lookahead [not JSdoc_comment] [ ';' | newline ]]

JSdoc_comment
  : comment_start whitespace* comment+ whitespace* comment_end

comment_start
  : '/**'
  
comment_end
  : '*/'
  
comment
  : [keyword whitespace+]? keyword [whitespace+ argument]* [whitespace+ comment]?
  | element+ [whitespace+ comment]?

element
  : text+
  | '&lt;'tagname'&gt;' whitespace* [element whitespace* '&lt;/'tagname'&gt;']*
  | '&lt;'tagname'/&gt;'

text
  : ASCII | ISO8859 | UNICODE
  | HTML401entity | HTML401Lat1Entity

<a name="word" id="word">word</a>
  : ['a'-'z','A'-'Z','_',UNICODE] text

tagname
  : HTML401Element
  | XHTML10Element
            
keyword
  : @['version' VersionExpression
      | [ 'author' | 'section' | 'subsection' ] whitespace+ text
      | 'filename' whitespace+ filename 
      | 'deprecated' [whitespace+ ResourceExpression]*
      | [ 'partof' | 'dependson' | 'reqfor' | 'requiredfor' | 'source']
        whitespace+ ResourceExpression
      | 'link{' LinkResource '}'
     ]
  | ['optional' | 'of' whitespace+ sub-type | 'default' whitespace+ ECMAScriptValue]

VersionExpression
  : whitespace+ version
  | whitespace*
    [lookahead comment_end text*? string_delimiter text+? string_delimiter]

version
  : number+ subversion*
  
subversion
  : '.' number+ subversion*
    
string_delimiter
  : [lookahead not '\'] '"'
  | [lookahead not '\'] "'"
  
filename
  : text+ ['.' text]*

ResourceExpression
  : [LinkResource [whitespace+ version]*
     | string_delimiter text+ string_delimiter
    ]
    [whitespace* ',' whitespace* ResourceExpression]*
    
LinkResource
  : [[base_id '#']? fragment_id]? argument_id
  | base_id '#' fragment_id argument_id?

base_id
  : filename
  | JSdocCatalogBaseID
  
fragment_id
  : HTML401FragmentID [lookahead not '()']
  
argument_id
  : '(' text*  ')'
  
TypeExpression
  : type ['of' subtype]? ['|' TypeExpression]?
    </pre>

    <p><a href="#top">Go to top</a></p>
    
    <hr size="3">
  
    <h2><a name="help" id="help">How You Can Help</a></h2>
    
    <p><em>Although already using
    <span class="jsdoc">JSdoc&trade;</span> in <a href="../">my scripts</a>,
    I am still working on a way to transform the comments into a readable
    documentation, like <a href="http://java.sun.com/j2se/javadoc/"
    >Javadoc</a>&trade; and [de]<a href="http://www.phpdoc.de/"
    >PHPdoc</a> do.  The ultimate goal is to write the required script
    parser in JavaScript.  <strong>If you have experience in this field
    (especially parser programming and Doclets), any help is greatly
    appreciated.  Send e-mail to <a href=
    "mailto:JSdoc@PointedEars.de%20%28Thomas%20'PointedEars'%20Lahn%29"
    >jsdoc@PointedEars.de</a>.</strong></em></p>
    
    <p><a href="#top">Go to top</a></p>

    <hr size="3">
    
    <h2><a name="copyright" id="copyright">Copyright &amp; Disclaimer</a></h2>
    
    <p>Copyright &copy; 2003, 2004  Thomas Lahn &lt;<a href=
      "mailto:JSdoc@PointedEars.de%20%28Thomas%20'PointedEars'%20Lahn%29"
      >jsdoc@PointedEars.de</a>&gt;.</p>
    
    <p><small>JavaScriptDoc, JSdoc and the JSdoc logos are
      trademarks of PointedEars&nbsp;Software (PES).
      <strong>All rights reserved.</strong><br>
      JavaScript and Javadoc are trademarks of Sun Microsystems Inc.<br>
      Other names and labels are the property of their respective
      owners.</small></p>
    
    <hr size="4">
    
    <p><b>Updated:</b> <?php echo $modi; ?></p>
    
    <p><a name="online" id="online">This document online</a>:
      &lt;<a href="http://pointedears.de/scripts/JSdoc/"
         >http://pointedears.de/scripts/jsdoc/</a>&gt;</p>
    
    <p><a href="#top">Go to top</a></p>
  </body>
</html>